% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_deep_learning.R
\name{sits_deeplearning}
\alias{sits_deeplearning}
\title{Train a  deep learning model using multi-layer perceptron}
\usage{
sits_deeplearning(
  samples = NULL,
  layers = c(512, 512, 512, 512, 512),
  activation = "elu",
  dropout_rates = c(0.5, 0.4, 0.35, 0.3, 0.2),
  optimizer = keras::optimizer_adam(lr = 0.001),
  epochs = 500,
  batch_size = 128,
  validation_split = 0.2,
  verbose = 1
)
}
\arguments{
\item{samples}{Time series with the training samples.}

\item{layers}{Vector with number of hidden nodes in each layer.}

\item{activation}{Vector with the names of activation functions.
Valid values are {'relu', 'elu', 'selu', 'sigmoid'}.}

\item{dropout_rates}{Vector with the dropout rates (0,1)
for each layer.}

\item{optimizer}{Function with a pointer to the optimizer function
(default is optimization_adam()).
Options are optimizer_adadelta(),
optimizer_adagrad(), optimizer_adam(),
optimizer_adamax(), optimizer_nadam(),
optimizer_rmsprop(), optimizer_sgd()}

\item{epochs}{Number of iterations to train the model.}

\item{batch_size}{Number of samples per gradient update.}

\item{validation_split}{Number between 0 and 1.
Fraction of the training data for validation.
The model will set apart this fraction
and will evaluate the loss and any model metrics
on this data at the end of each epoch.}

\item{verbose}{Verbosity mode (0 = silent,
1 = progress bar, 2 = one line per epoch).}
}
\value{
Either a model to be passed in sits_predict
                         or a function prepared to be called further.
}
\description{
Use a multi-layer perceptron algorithm to classify data.
This function is a front-end to the "keras" method R package.
Please refer to the documentation in that package for more details.
}
\examples{
\donttest{
# Retrieve the set of samples for the Mato Grosso region
data(samples_mt_4bands)
samples_mt_ndvi <- sits_select_bands(samples_mt_4bands, ndvi)
# Build a machine learning model based on deep learning
dl_model <- sits_train (samples_mt_ndvi,
                        sits_deeplearning(layers = c(64, 64, 64),
                                          dropout_rates = c(0.50, 0.40, 0.35),
                                          epochs = 50))
# get a point with a 16 year time series
data(point_ndvi)
# classify the point
class.tb <- sits_classify (point_ndvi, dl_model)
# plot the classified point
sits_plot(class.tb)
}
}
\author{
Gilberto Camara, \email{gilberto.camara@inpe.br}

Alexandre Ywata de Carvalho, \email{alexandre.ywata@ipea.gov.br}

Rolf Simoes, \email{rolf.simoes@inpe.br}
}
